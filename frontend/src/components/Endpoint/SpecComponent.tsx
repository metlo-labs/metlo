import { useState } from "react"
import {
  Box,
  useColorModeValue,
  HStack,
  Tag,
  IconButton,
  Select,
  Tooltip,
  Icon,
} from "@chakra-ui/react"
import { HiOutlineExclamationCircle } from "@react-icons/all-files/hi/HiOutlineExclamationCircle"
import { saveAs } from "file-saver"
import { BsFileCode } from "@react-icons/all-files/bs/BsFileCode"
import YAML from "yaml"
import JsYaml from "js-yaml"
import Highlight, { defaultProps } from "prism-react-renderer"
import darkTheme from "prism-react-renderer/themes/duotoneDark"
import lightTheme from "prism-react-renderer/themes/github"
import { FiDownload } from "@react-icons/all-files/fi/FiDownload"
import { ApiEndpointDetailed } from "@common/types"
import { SpecExtension } from "@common/enums"
import { DataHeading } from "components/utils/Card"

interface SpecComponentProps {
  endpoint: ApiEndpointDetailed
}

const EXTENSION_TO_TYPE: Record<SpecExtension, string> = {
  [SpecExtension.YAML]: "application/yaml;charset=utf-8",
  [SpecExtension.JSON]: "application/json;charset=utf-8",
}

const SpecComponent: React.FC<SpecComponentProps> = ({ endpoint }) => {
  const theme = useColorModeValue(lightTheme, darkTheme)
  const [specString, setSpecString] = useState<string>(
    endpoint.openapiSpec?.spec,
  )
  const [currExtension, setCurrExtension] = useState<SpecExtension>(
    endpoint.openapiSpec?.extension,
  )

  const blob = new Blob([specString], {
    type: EXTENSION_TO_TYPE[currExtension],
  })

  const changeExtensionHandler = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const extension = e.target.value
    if (extension === endpoint.openapiSpec.extension) {
      setSpecString(endpoint.openapiSpec.spec)
      setCurrExtension(endpoint.openapiSpec.extension)
    } else if (extension === SpecExtension.YAML) {
      const obj = JSON.parse(specString)
      setSpecString(YAML.stringify(obj))
      setCurrExtension(SpecExtension.YAML)
    } else if (extension === SpecExtension.JSON) {
      const specObj = JsYaml.load(specString)
      const jsonString = JSON.stringify(specObj, null, 2)
      setSpecString(jsonString)
      setCurrExtension(SpecExtension.JSON)
    }
  }

  const downloadFileHandler = () => {
    saveAs(blob, `${endpoint?.openapiSpec?.name}.${currExtension}`)
  }

  return (
    <Box w={{ base: "full", lg: "50%" }} h="full">
      {endpoint?.openapiSpec && (
        <HStack
          w="full"
          px="4"
          borderWidth={1}
          py="2"
          justifyContent="space-between"
        >
          <HStack w="full">
            <HStack wordBreak="break-all">
              <Box>
                {endpoint?.openapiSpec?.isAutoGenerated ? (
                  <Tooltip
                    bg="orange.300"
                    placement="top"
                    shouldWrapChildren
                    label="Auto generated spec might not be able to discern the types of all fields. For fields where type could not be determined or the value was detected to be null, 'unknown' was used as the type which is not a valid type for an OpenAPI Specification."
                  >
                    <Icon
                      as={HiOutlineExclamationCircle}
                      boxSize="30px"
                      color="orange.500"
                    />
                  </Tooltip>
                ) : (
                  <BsFileCode fontSize="30px" />
                )}
              </Box>
              <DataHeading fontSize="lg">
                {endpoint?.openapiSpec?.name}
              </DataHeading>
            </HStack>
            <Box>
              {endpoint?.openapiSpec?.isAutoGenerated && (
                <Tag rounded="3xl" size="md" colorScheme="blue">
                  Generated
                </Tag>
              )}
            </Box>
          </HStack>
          <HStack spacing="4">
            <Select
              defaultValue={endpoint?.openapiSpec?.extension}
              w="max-content"
              onChange={changeExtensionHandler}
            >
              <option value={SpecExtension.YAML}>yaml</option>
              <option value={SpecExtension.JSON}>json</option>
            </Select>
            <IconButton
              onClick={downloadFileHandler}
              borderWidth={1}
              aria-label="download-button"
              icon={<FiDownload />}
            />
          </HStack>
        </HStack>
      )}
      <Box overflowY="auto" h={{ base: "700px", lg: "calc(100% - 60px)" }}>
        <Highlight
          {...defaultProps}
          theme={theme}
          code={specString || "No spec."}
          language={currExtension || "yaml"}
        >
          {({ className, style, tokens, getLineProps, getTokenProps }) => (
            <pre
              className={className}
              style={{
                ...style,
                fontSize: "14px",
                padding: "8px",
                overflowX: "scroll",
                minHeight: "100%",
              }}
            >
              {tokens.map((line, i) => (
                <pre
                  style={{
                    textAlign: "left",
                    margin: "1em 0",
                    padding: "0.5em",
                    overflow: "scroll",
                  }}
                  key={i}
                  {...getLineProps({ line, key: i })}
                >
                  <span
                    style={{
                      display: "table-cell",
                      textAlign: "right",
                      paddingRight: "1em",
                      userSelect: "none",
                      opacity: "0.5",
                    }}
                  >
                    {i + 1}
                  </span>
                  <span style={{ display: "table-cell" }}>
                    {line.map((token, key) => (
                      <span key={key} {...getTokenProps({ token, key })} />
                    ))}
                  </span>
                </pre>
              ))}
            </pre>
          )}
        </Highlight>
      </Box>
    </Box>
  )
}

export default SpecComponent
