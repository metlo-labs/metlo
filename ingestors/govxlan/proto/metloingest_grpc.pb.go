// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: proto/metloingest.proto

package metloingest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetloIngestClient is the client API for MetloIngest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetloIngestClient interface {
	ProcessTrace(ctx context.Context, in *ApiTrace, opts ...grpc.CallOption) (*ProcessTraceRes, error)
	ProcessTraceAsync(ctx context.Context, opts ...grpc.CallOption) (MetloIngest_ProcessTraceAsyncClient, error)
}

type metloIngestClient struct {
	cc grpc.ClientConnInterface
}

func NewMetloIngestClient(cc grpc.ClientConnInterface) MetloIngestClient {
	return &metloIngestClient{cc}
}

func (c *metloIngestClient) ProcessTrace(ctx context.Context, in *ApiTrace, opts ...grpc.CallOption) (*ProcessTraceRes, error) {
	out := new(ProcessTraceRes)
	err := c.cc.Invoke(ctx, "/metloingest.MetloIngest/ProcessTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metloIngestClient) ProcessTraceAsync(ctx context.Context, opts ...grpc.CallOption) (MetloIngest_ProcessTraceAsyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetloIngest_ServiceDesc.Streams[0], "/metloingest.MetloIngest/ProcessTraceAsync", opts...)
	if err != nil {
		return nil, err
	}
	x := &metloIngestProcessTraceAsyncClient{stream}
	return x, nil
}

type MetloIngest_ProcessTraceAsyncClient interface {
	Send(*ApiTrace) error
	CloseAndRecv() (*ProcessTraceAsyncRes, error)
	grpc.ClientStream
}

type metloIngestProcessTraceAsyncClient struct {
	grpc.ClientStream
}

func (x *metloIngestProcessTraceAsyncClient) Send(m *ApiTrace) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metloIngestProcessTraceAsyncClient) CloseAndRecv() (*ProcessTraceAsyncRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProcessTraceAsyncRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetloIngestServer is the server API for MetloIngest service.
// All implementations must embed UnimplementedMetloIngestServer
// for forward compatibility
type MetloIngestServer interface {
	ProcessTrace(context.Context, *ApiTrace) (*ProcessTraceRes, error)
	ProcessTraceAsync(MetloIngest_ProcessTraceAsyncServer) error
	mustEmbedUnimplementedMetloIngestServer()
}

// UnimplementedMetloIngestServer must be embedded to have forward compatible implementations.
type UnimplementedMetloIngestServer struct {
}

func (UnimplementedMetloIngestServer) ProcessTrace(context.Context, *ApiTrace) (*ProcessTraceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTrace not implemented")
}
func (UnimplementedMetloIngestServer) ProcessTraceAsync(MetloIngest_ProcessTraceAsyncServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessTraceAsync not implemented")
}
func (UnimplementedMetloIngestServer) mustEmbedUnimplementedMetloIngestServer() {}

// UnsafeMetloIngestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetloIngestServer will
// result in compilation errors.
type UnsafeMetloIngestServer interface {
	mustEmbedUnimplementedMetloIngestServer()
}

func RegisterMetloIngestServer(s grpc.ServiceRegistrar, srv MetloIngestServer) {
	s.RegisterService(&MetloIngest_ServiceDesc, srv)
}

func _MetloIngest_ProcessTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiTrace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetloIngestServer).ProcessTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metloingest.MetloIngest/ProcessTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetloIngestServer).ProcessTrace(ctx, req.(*ApiTrace))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetloIngest_ProcessTraceAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetloIngestServer).ProcessTraceAsync(&metloIngestProcessTraceAsyncServer{stream})
}

type MetloIngest_ProcessTraceAsyncServer interface {
	SendAndClose(*ProcessTraceAsyncRes) error
	Recv() (*ApiTrace, error)
	grpc.ServerStream
}

type metloIngestProcessTraceAsyncServer struct {
	grpc.ServerStream
}

func (x *metloIngestProcessTraceAsyncServer) SendAndClose(m *ProcessTraceAsyncRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metloIngestProcessTraceAsyncServer) Recv() (*ApiTrace, error) {
	m := new(ApiTrace)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetloIngest_ServiceDesc is the grpc.ServiceDesc for MetloIngest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetloIngest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metloingest.MetloIngest",
	HandlerType: (*MetloIngestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessTrace",
			Handler:    _MetloIngest_ProcessTrace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessTraceAsync",
			Handler:       _MetloIngest_ProcessTraceAsync_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/metloingest.proto",
}